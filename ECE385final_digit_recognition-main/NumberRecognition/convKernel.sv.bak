module convKernel#(
    parameter integer BITWIDTH = 32,   
    
    parameter integer INPUTCHANNEL = 1, 
    
    parameter integer FILTERHEIGHT = 5,
    parameter integer FILTERWIDTH = 5
    )
    (
    input logic signed [BITWIDTH * INPUTCHANNEL * FILTERHEIGHT * FILTERWIDTH - 1 : 0]data,
    input logic signed [BITWIDTH * INPUTCHANNEL * FILTERHEIGHT * FILTERWIDTH - 1 : 0]weight,
    input logic signed [BITWIDTH - 1 : 0] bias,
    output logic signed [BITWIDTH - 1 : 0]result
    );
    
    logic signed [BITWIDTH  - 1 : 0] out [FILTERHEIGHT * FILTERWIDTH * INPUTCHANNEL - 1 : 0];
    
    generate
        genvar i;
        for(i = 0; i < FILTERHEIGHT * FILTERWIDTH * INPUTCHANNEL; i = i + 1) 
		  begin : kernel_inst  // must give this block a name 
            Mult#(BITWIDTH) mult(
				.a(data[(i + 1) * BITWIDTH - 1 : i * BITWIDTH]), 
				.b(weight[(i + 1) * BITWIDTH - 1 : i * BITWIDTH]), 
				.c(out[i]));
        end
    endgenerate
    
    integer j;
    always_comb 
	 begin 
        result = 0;
        for(j = 0; j < FILTERHEIGHT * FILTERWIDTH * INPUTCHANNEL; j = j + 1) begin
            result = result + out[j];
        end
        result = result + bias;
    end
    
endmodule
