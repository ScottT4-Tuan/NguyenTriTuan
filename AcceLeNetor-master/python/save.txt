------------------------------Convolution 1--------------------------------
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# Gán sẵn giá trị của kernel
conv1_kernel_0 = np.array([
    [-73, -51, 23, -12, 27],
    [-90, 24, 23, 23, 13],
    [-71, 69, 38, 37, -5],
    [-27, 15, 32, 17, 4],
    [-18, 34, -6, -14, -35]
])

conv1_kernel_1 = np.array([
    [14, 4, 7, -12, -16],
    [26, 9, -2, 1, -4],
    [23, 28, 6, 0, 30],
    [-6, 42, 67, 28, 6],
    [0, -6, 2, 15, 15]
])
#28x28 input
image = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 116, 19, 0, 0, 0, 0, 0], #5
    [0, 0, 0, 0, 31, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 90, 19, 0, 0, 0, 0, 0, 0], #6
    [0, 0, 0, 0, 63, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 76, 105, 20, 0, 0, 0, 0, 0], #7
    [0, 0, 0, 0, 110, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 127, 81, 0, 0, 0, 0, 0, 0], #8
    [0, 0, 0, 0, 111, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 127, 62, 0, 0, 0, 0, 0, 0], #9
    [0, 0, 0, 23, 122, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 127, 28, 0, 0, 0, 0, 0, 0], #10
    [0, 0, 0, 60, 127, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 115, 127, 14, 0, 0, 0, 0, 0, 0], #11
    [0, 0, 0, 79, 127, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 127, 108, 8, 0, 0, 0, 0, 0, 0], #12
    [0, 0, 0, 79, 127, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 43, 89, 124, 127, 45, 0, 0, 0, 0, 0, 0, 0], #13
    [0, 0, 0, 79, 127, 42, 0, 0, 0, 23, 24, 58, 72, 75, 120, 121, 117, 89, 120, 126, 20, 0, 0, 0, 0, 0, 0, 0], #14
    [0, 0, 0, 75, 126, 118, 103, 103, 103, 126, 127, 125, 120, 99, 71, 45, 14, 2, 116, 125, 0, 0, 0, 0, 0, 0, 0, 0], #15
    [0, 0, 0, 59, 88, 88, 88, 88, 88, 88, 49, 28, 0, 0, 0, 0, 0, 51, 127, 110, 0, 0, 0, 0, 0, 0, 0, 0], #16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 127, 110, 0, 0, 0, 0, 0, 0, 0, 0], #17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 68, 0, 0, 0, 0, 0, 0, 0, 0], #18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 28, 0, 0, 0, 0, 0, 0, 0, 0], #19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 28, 0, 0, 0, 0, 0, 0, 0, 0], #20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 28, 0, 0, 0, 0, 0, 0, 0, 0], #21
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 48, 0, 0, 0, 0, 0, 0, 0, 0], #22
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 76, 0, 0, 0, 0, 0, 0, 0, 0], #23
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 127, 76, 0, 0, 0, 0, 0, 0, 0, 0], #24
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 127, 76, 0, 0, 0, 0, 0, 0, 0, 0], #25
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #26
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #27
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #28
])

def convolution_1(image, kernel):
    kernel_height, kernel_width = kernel.shape
    image_height, image_width = image.shape
    image_padded = np.pad(image, pad_width=2, mode='constant', constant_values=0)

    output_height = image_padded.shape[0] - kernel_height + 1
    output_width = image_padded.shape[1] - kernel_width + 1
    output = np.zeros((output_height, output_width))

    # Duyệt qua ảnh và thực hiện phép nhân chéo với kernel
    for i in range(output_height):
        for j in range(output_width):
            region = image_padded[i:i+kernel_height, j:j+kernel_width]  # Lấy vùng con của ảnh
            output[i, j] = np.sum(region * kernel)  # Nhân từng phần tử và cộng lại

    return output

# Áp dụng phép nhân với cả 2 kernel
output_0 = convolution_1(image, conv1_kernel_0)
output_1 = convolution_1(image, conv1_kernel_1)
output_df_0 = pd.DataFrame(output_0)
output_df_1 = pd.DataFrame(output_1)

with pd.ExcelWriter('D:/Coding/AcceLeNetor-master/excel/convolution1_results.xlsx') as writer:
    output_df_0.to_excel(writer, sheet_name='Output with Kernel 0', index=False)
    output_df_1.to_excel(writer, sheet_name='Output with Kernel 1', index=False)

print("Results have been saved to 'convolution1_results.xlsx'.")
# Hiển thị kết quả
plt.subplot(1, 2, 1)
plt.imshow(output_0, cmap='gray')
plt.title("Output with Kernel 0")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(output_1, cmap='gray')
plt.title("Output with Kernel 1")
plt.axis('off')

plt.show()
----------------------------------------------------------------------------------------------------------